Info<< "Reading optimization parameters\n" << endl;
IOdictionary optProperties
(
   IOobject
   (
       "optProperties",
       runTime.constant(),
       mesh,
       IOobject::MUST_READ_IF_MODIFIED,
       IOobject::NO_WRITE
   )
);
//optimization parameters
scalar raa0(readScalar(optProperties.lookup("raa0")));
scalar mma_init(readScalar(optProperties.lookup("mma_init")));
scalar mma_dec(readScalar(optProperties.lookup("mma_dec")));
scalar mma_inc(readScalar(optProperties.lookup("mma_inc")));
scalar movlim(readScalar(optProperties.lookup("movlim")));
scalar voluse(readScalar(optProperties.lookup("voluse")));
scalar volinit(readScalar(optProperties.lookup("volinit")));
scalar GeoDim(readScalar(optProperties.lookup("GeoDim")));
scalar PowerDiss0(readScalar(optProperties.lookup("PowerDiss0")));
scalar PowerDissMax(readScalar(optProperties.lookup("PowerDissMax")));
scalar PowerDissRelax(readScalar(optProperties.lookup("PowerDissRelax")));
scalar C0(readScalar(optProperties.lookup("C0")));
scalar CMax(readScalar(optProperties.lookup("CMax")));
scalar CRelax(readScalar(optProperties.lookup("CRelax")));
scalar filterR(readScalar(optProperties.lookup("filterR")));
Switch solid_area(optProperties.lookup("solid_area"));
Switch fluid_area(optProperties.lookup("fluid_area"));
Switch test_area(optProperties.lookup("test_area"));

Info<< "Reading pseudo-density field\n" << endl;
volScalarField xp
(
    IOobject
    (
        "xp",
        runTime.timeName(),
        mesh,
        IOobject::READ_IF_PRESENT,
        IOobject::AUTO_WRITE
    ),
    mesh,
    scalar(volinit),
    zeroGradientFvPatchScalarField::typeName
);

volScalarField xh
(
    IOobject
    (
        "xh",
        runTime.timeName(),
        mesh,
        IOobject::READ_IF_PRESENT,
        IOobject::AUTO_WRITE
    ),
    mesh,
    scalar(volinit),
    zeroGradientFvPatchScalarField::typeName
);
volScalarField x(xp);
volScalarField drho(x);

volScalarField Umag
(
    IOobject
    (
        "Umag",
        runTime.timeName(),
        mesh,
        IOobject::NO_READ,
        IOobject::AUTO_WRITE
    ),
    mesh,
    0.0,
    zeroGradientFvPatchScalarField::typeName
);

// find the cells in the non-design area
labelList cells_solid, cells_fluid, cells_test;
if (solid_area)
{
    word zoneName = "solid_area";
    label zoneID = mesh.cellZones().findZoneID(zoneName);
    cells_solid = mesh.cellZones()[zoneID];
    forAll(cells_solid, i)
    {
        x[cells_solid[i]] = 0;
    }
}
if (fluid_area)
{
    word zoneName = "fluid_area";
    label zoneID = mesh.cellZones().findZoneID(zoneName);
    cells_fluid = mesh.cellZones()[zoneID];
    forAll(cells_fluid, i)
    {
        x[cells_fluid[i]] = 1.0;
    }
}
if (test_area)
{
    word zoneName = "test_area";
    label zoneID = mesh.cellZones().findZoneID(zoneName);
    cells_test = mesh.cellZones()[zoneID];
    forAll(cells_test, i)
    {
        x[cells_test[i]] = 1.0;
        xh[cells_test[i]] = 1.0;
    }
}

volScalarField gsensVol
(
    IOobject
    (
        "gsensVol",
        runTime.timeName(),
        mesh,
        IOobject::NO_READ,
        IOobject::AUTO_WRITE
    ),
    xh,
    zeroGradientFvPatchScalarField::typeName
);
volScalarField gsenshVol(xh);

// find the cells on the boundary
dictionary conFunc = mesh.solutionDict().subDict("constraintFunctionDict_flow");
int nObjPatch = conFunc.lookupOrDefault<scalar>("numberConstraintPatches", 2);
wordList conPatchNames = conFunc.lookup("constraintPatchesNames");
label conPatchList[nObjPatch]; // patch list
int iLoop;
for (iLoop = 0; iLoop < nObjPatch; iLoop++)
{
    conPatchList[iLoop] = mesh.boundaryMesh().findPatchID(conPatchNames[iLoop]);
}
